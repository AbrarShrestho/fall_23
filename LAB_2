
Task_1

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


void addToBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

void addToEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

      addToBeginning(&head, 5);
    addToEnd(&head, 10);
    addToEnd(&head, 15);

      printf("Linked List: ");
    printList(head);

    return 0;
}



Task_2

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void addToBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

void addToEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void insertAfterValue(struct Node* head, int value, int data) {
    struct Node* current = head;
    while (current != NULL) {
        if (current->data == value) {
            struct Node* newNode = createNode(data);
            newNode->next = current->next;
            current->next = newNode;
            return;
        }
        current = current->next;
    }
}

void insertAtPosition(struct Node** head, int position, int data) {
    if (position <= 0) {
        return;
    }

    if (position == 1) {
        addToBeginning(head, data);
        return;
    }

    struct Node* newNode = createNode(data);
    struct Node* current = *head;
    int count = 1;

    while (count < position - 1 && current != NULL) {
        current = current->next;
        count++;
    }

    if (current != NULL) {
        newNode->next = current->next;
        current->next = newNode;
    }
}

void deleteByValue(struct Node** head, int value) {
    if (*head == NULL) {
        return;
    }

    if ((*head)->data == value) {
        struct Node* temp = *head;
        *head = (*head)->next;
        free(temp);
        return;
    }

    struct Node* current = *head;
    while (current->next != NULL) {
        if (current->next->data == value) {
            struct Node* temp = current->next;
            current->next = current->next->next;
            free(temp);
            return;
        }
        current = current->next;
    }
}

void deleteAtPosition(struct Node** head, int position) {
    if (position <= 0 || *head == NULL) {
        return;
    }

    if (position == 1) {
        struct Node* temp = *head;
        *head = (*head)->next;
        free(temp);
        return;
    }

    struct Node* current = *head;
    int count = 1;

    while (count < position - 1 && current->next != NULL) {
        current = current->next;
        count++;
    }

    if (current->next != NULL) {
        struct Node* temp = current->next;
        current->next = current->next->next;
        free(temp);
    }
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

      addToBeginning(&head, 5);
    insertAfterValue(head, 5, 25);

       deleteByValue(&head, 5);

      insertAtPosition(&head, 2, 20);

      deleteAtPosition(&head, 3);
    printf("Linked List: ");
    printList(head);

    return 0;
}


Task_3

#include <stdio.h>
#include <stdlib.h>


struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void addToBeginning(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

void reverseLinkedList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;

    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    *head = prev; // Update the new head
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

      addToBeginning(&head, 5);
    addToBeginning(&head, 25);
    addToBeginning(&head, 20);

       printf("Original Linked List: ");
    printList(head);

      reverseLinkedList(&head);

      printf("Reversed Linked List: ");
    printList(head);

    return 0;
}


Task_4

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void addToEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

bool hasCycle(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;

        if (slow == fast) {
            return true;
        }
    }

    return false;
}

struct Node* findCycleStart(struct Node* head) {
    struct Node* slow = head;
    struct Node* fast = head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;

        if (slow == fast) {
                       slow = head;
            while (slow != fast) {
                slow = slow->next;
                fast = fast->next;
            }
            return slow;      
   }
    }

    return NULL;
}

int main() {
    struct Node* head = NULL;

      addToEnd(&head, 5);
    addToEnd(&head, 10);
    addToEnd(&head, 15);
    addToEnd(&head, 20);

     head->next->next->next->next = head->next; // Creating a cycle from the fourth node to the second node

       bool hasCycleResult = hasCycle(head);

    if (hasCycleResult) {
        printf("Has Cycle: Yes\n");
               struct Node* cycleStart = findCycleStart(head);
        if (cycleStart != NULL) {
            printf("Cycle Start Node: %d\n", cycleStart->data);
        } else {
            printf("Cycle Start Node: Unknown\n");
        }
    } else {
        printf("Has Cycle: No\n");
    }

    return 0;
}


Task_5

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void addToEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* mergeSortedLists(struct Node* listA, struct Node* listB) {
    struct Node* mergedList = NULL;
    struct Node* tail = NULL;

    while (listA != NULL && listB != NULL) {
        if (listA->data < listB->data) {
            if (mergedList == NULL) {
                mergedList = listA;
                tail = listA;
            } else {
                tail->next = listA;
                tail = listA;
            }
            listA = listA->next;
        } else {
            if (mergedList == NULL) {
                mergedList = listB;
                tail = listB;
            } else {
                tail->next = listB;
                tail = listB;
            }
            listB = listB->next;
        }
    }

       if (listA != NULL) {
        tail->next = listA;
    } else {
        tail->next = listB;
    }

    return mergedList;
}

void printList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* listA = NULL;
    struct Node* listB = NULL;

      addToEnd(&listA, 5);
    addToEnd(&listA, 10);
    addToEnd(&listB, 7);
    addToEnd(&listB, 12);

    struct Node* mergedList = mergeSortedLists(listA, listB);

      printf("Merged List: ");
    printList(mergedList);

    return 0;
}




